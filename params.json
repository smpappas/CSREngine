{"name":"Client-Side Reliability Engine","tagline":"HTML - CSS - JS","body":"## Overview\r\n\r\nThe Client-Side Reliability Engine provides feedback on common bugs associated with HTML, CSS, and JavaScript code. The engine helps to ensure that best practices are being employed to improve reliability and reduce the chance of undesired results.\r\n\r\nAn example can be found at [http://steve-pappas.com/csr](http://steve-pappas.com/csr)\r\n\r\nIf you would like to be added to this project or request that the repository be made public, please email me at smp2183 AT columbia DOT edu .\r\n\r\n## Users\r\n\r\n#### Dependencies\r\n\r\nThe Client-Side Reliability Engine makes use of jQuery and requires version 1.6 or higher. For more information on jQuery, visit http://www.jquery.com.\r\n\r\njQuery can be referenced from Google's CDN by placing the following code inside the `<head>` tag of your page\r\n\r\n```html\r\n    <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\n#### Usage\r\n\r\nIn the `<head>` tag of your page, include the following reference\r\n\r\n```html\r\n    <script src=\"http://www.steve-pappas.com/staticsmp/csr-engine/js/csr-engine.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nYou may also host the project separately. Please see the <a href=\"http://smpappas.github.io/CSREngine/developers\" style=\"font-weight: bold;\">Developers</a> page for information about hosting. If hosted separately, include the following reference instead\r\n\r\n\r\n```html\r\n    <script src=\"/path/to/csr-engine.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nAt the bottom of the `<head>` tag, also include the following script block\r\n\r\n```html\r\n    <script type=\"text/javascript\">\r\n        $(function () {\r\n                var options = { }\r\n                \r\n                CSREngine.initialize(options);\r\n            });\r\n    </script>\r\n```\r\n\r\nThis script block initializes the Client-Side Reliability Engine and runs an analysis with the default options.\r\n\r\n#### Options\r\n\r\nOptions can be defined both in the `<script>` drop-in code to replace defaults, or chosen from the options panel within your Web page. An example script to set the default options is shown below.\r\n\r\n```html\r\n    <script type=\"text/javascript\">\r\n        $(function () {\r\n                var options = {\r\n                    \"html\": true,\r\n                    \"css\": true,\r\n                    \"javascript\": true,\r\n                    \"filters\": [\r\n                        \"tria1.js\",\r\n                        \"trial2.js\"\r\n                    ],\r\n                    \"noFilters\": [\r\n                        \r\n                    ],\r\n                    \"lint\": true,\r\n                    // define jslint options\r\n                    \"lintOptions\": [ {\r\n                        \"browser\": true,\r\n                        \"devel\": true,\r\n                        \"predef\": [\"jQuery\", \"$\"],\r\n                        \"sloppy\": true,\r\n                        \"vars\": true,\r\n                        \"white\": true\r\n                    } ]\r\n                }\r\n                \r\n                CSREngine.initialize(options);\r\n            });\r\n    </script>\r\n```\r\n\r\nThe following options are available\r\n\r\n`\"html\"` - true to run HTML tests, false otherwise. Default is true.<br />\r\n`\"css\"` - true to run CSS tests, false otherwise. Default is true.<br />\r\n`\"javascript\"` - true to run JavaScript tests, false otherwise. Default is true.<br />\r\n`\"filters\"` - List files that should not be included in the tests. For example, you may not want to include third-party library files that would not be filtered out by default.<br />\r\n`\"noFilters\"` - List of files that should always be included in the tests. This will override the default filters.<br />\r\n`\"lint\"` - true to run JSLint on JavaScript files, false otherwise. Default is true.<br />\r\n`\"lintOptions\"` - Set the JSLint options. Defaults are shown in example above. Please see Options section at http://www.jslint.com/lint.html for details of each available option.<br />\r\n\r\nOptions will reset to these defaults on each refresh, but all options can be selected ad hoc through the options panel within the page.\r\n\r\n#### Test Cases\r\n\r\nThe Client-Side Reliability Engine runs a series of test cases on each client-side file to determine if any issues exist. These tests perform static code analysis on each file, meaning no code within the file is actually executed. Test are grouped into test suites by file type. Each suite of tests can be added or removed from analysis through the Web page options panel.\r\n\r\nPlease see the \"Managing and Writing User Defined Test Cases\" topic within the Developers section for more detail about user defined tests.\r\n\r\n#### JSLint Integration\r\n\r\nThe Client-Side Reliability engine integrates JSLint to perform tests on JavaScript files. Integration is turned on by default, but can be turned off within script options or the options panel.\r\n\r\nAll major JSLint options are available. Please see Options section at http://www.jslint.com/lint.html for details of each available option.\r\n\r\n#### Filters\r\n\r\nBy default, common third-party libraries and frameworks, such as jQuery, MooTools, and backbone.js, are not analyzed by the engine. Default files to filter out can be added through the options discussed above. To override a file that is filtered out by default, add the file to the \"noFilters\" option. Files can also be added or removed from analysis through the Web page options panel.\r\n\r\n----\r\n\r\n## Developers\r\n\r\nPlease see the <a href=\"http://smpappas.github.io/CSREngine/developers\" style=\"font-weight: bold;\">Developers</a> page for information about hosting and writing user defined tests.\r\n\r\n## Developers\r\n\r\n### Files\r\n\r\nThe directory structure looks as follows\r\n\r\n    csr-engine/\r\n        css/\r\n            csr-engine.css\r\n            syntax/\r\n                shCore.css\r\n        js/\r\n            csr-engine.js\r\n            csr-test-cases.js\r\n            beautify/\r\n                beautify.js\r\n            jslint/\r\n                jslint.js\r\n            syntax/\r\n                shBrushCss.js\r\n                shBrushJScript.js\r\n                shBrushXml.js\r\n                shCore.js\r\n\r\n`js/csr-test-cases.js` - Contains the implementation of all test cases, as well as a list of all test cases to be run.<br />\r\n`js/csr-engine.css` - Contains all styling for the engine.<br />\r\n`css/csr-engine.js` - Contains all classes and code relevant to the core functionality of the engine.<br />\r\n`js/beautify/beautify.js` - Un-minifies scripts so that they can be analyzed.<br />\r\n`js/jslint/jslint.js` - Contains the core functionality for JSLint by Douglas Crockford.<br />\r\n`js/syntax/*` - Contains all scripts related to syntax highlighting.<br />\r\n`css/syntax/shCore.css` - Contains styling for syntax highlighting.<br />\r\n\r\n### Hosting the Engine\r\n\r\nThe engine is currently hosted at: http://www.steve-pappas.com/staticsmp/csr-engine/js/csr-engine.js\r\n\r\nTo host the engine on a different server, each file needs to be uploaded to that server.  As explained above, the `<script>` tag in the Web page should link to the location of csr-engine.js.  In addition, csr-engine.js must be updated as described below.\r\n\r\nThe CSREngine class contains a member called locPrefix.  Update the following line to contain the paths to the root csr-engine/ folder.  This location is defined as the first member of the CSREngine class.\r\n\r\n```javascript\r\n    this.locPrefix = \"path/to/csr-engine/\";\r\n```\r\n\r\n### Managing and Writing User Defined Test Cases\r\n\r\nEach test case is designated a type, which determines which files the test applies to.\r\n\r\nNew test cases can be added into the file csr-test-cases.js. Existing test cases can be used as a guide. The steps to create a new test case are as follows.\r\n\r\n1.  Add a new entry to the populateTestCases function within the csrTestCases namespace.  The entry should look similar to below.  The first parameter specifies the namespace of the test case you are creating, always beginning with \"csr\" - look at examples for clarification.  The second parameter will specify the file that the test case resides in, but this should be left as null until this is implemented.  The last parameter specifies the type of test case and should be one of \"html\", \"css\", or \"js\".\r\n    \r\n```javascript\r\n    this.addTestCase(\"csrNamespaceOfTestCase\", null, \"html\");\r\n```\r\n\r\n2.  Create a namespace for the test case and an execute function.  The format should be similar to below.\r\n\r\n```javascript\r\n    var csrNamespaceOfTestCase = {\r\n    \r\n        execute: function (document) {\r\n            // Test body goes here\r\n        }\r\n        \r\n    };\r\n```\r\n    \r\nThe execute function of your new test case will be called automatically.  There is no restriction to adding more helper functions within your new test namespace, and in fact this is encouraged for code clarity.  These functions can be called from execute, i.e. execute() can be thought of as a main() function, where code execution for your test case begins.\r\n\r\nA complete example can be seen below. This code will test to see if a radix has been specified when using the ParseInt() function in JavaScript.\r\n\r\n```javascript\r\n    var csrNamespaceOfTestCase = {\r\n\r\n        execute: function (document) {\r\n            var matches = document.findFunction(\"parseInt\");\r\n               \r\n            for (var i=0; i<matches.length; i++) {\r\n                if (matches[i].args.length <= 1) {\r\n                    matches[i].printLines(\"No radix specified.\");\r\n                }\r\n            }\r\n        }\r\n\r\n    };\r\n```\r\n\r\n### Searching and Scanning Document Code\r\n\r\n`Document.regex(pattern)` - Applies to HTML, CSS, JS\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n`Document.findFunction(f)` - Applies to JS\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds instances of a function and returns locations and arguments. Returns an array of Match objects.\r\n\r\n`Document.findTag(tag - Applies to HTML\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds instances of html tags and returns attribute values. Returns an array of Match objects.\r\n\r\n`Document.findSelector(s)` - Applies to CSS\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds instances of class/identifier and returns properties and values. Returns an array of Match objects.\r\n\r\n`Document.findProperty(prop)` - Applies to CSS\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds instances of property and returns and values. Returns an array of Match objects.\r\n\r\n### Additional Helper Functions\r\n\r\nThere are a number of helper functions available to help with implementing test cases.  Please use existing examples as reference.\r\n\r\n_Documents_\r\n\r\n`Document.getLines()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array that consists of the document split into lines. This allows traversal of the document line by line using a __for__ loop or similar.\r\n\r\n`Document.indexToLine(index)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Takes an index number and converts it to a line number in source code.\r\n\r\n`Document.lineToCode(line)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Takes a line number and returns the source code of the line.\r\n\r\n`Document.addError()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Should be called when an error is found if not using the Match class. This is used to track the number of errors found in each document.\r\n\r\n_Code Blocks_\r\n\r\nA CodeBlock class has been implemented to make it easy to print formatted code to screen. Example usage is shown below, and member functions are described.\r\n\r\n    var lines = document.getLines();\r\n    for (var i = 0; i < lines.length; i++) {\r\n        var line = lines[i];\r\n        \r\n        // Trim line to ensure trailing spaces and new lines are not included\r\n        var cb = new CodeBlock(line.trim(), i+1);\r\n        cb.print();\r\n    }\r\n    \r\n`CodeBlock(code, lineNumber)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize a new CodeBlock instance with code found at lineNumber.  Parameters code and lineNumber are optional, and CodeBlock will be initialized to be empty if not specified.\r\n\r\n`CodeBlock.add(code, lineNumber)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds code found at lineNumber to current CodeBlock instance.  This can be used to create a single-line code block when the current instance is empty, or used to create multiline code blocks by calling this function on sequential lines of code.\r\n\r\n`CodeBlock.clear()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empties the current CodeBlock instance.  New code can be added to the existing code block through CodeBlock.add().\r\n\r\n`CodeBlock.print()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prints the current CodeBlock instance to screen.\r\n\r\n_General Utility_\r\n\r\n`util.printString(s, classes)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print string s to screen.  This function should always be used when printing to the tool output.  Parameter classes is optional and will add any specified CSS classes to the text output, e.g. to make text bold-italic specify \"csr-bold csr-italic\".\r\n\r\n`util.printError(lineNumber, e)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Similar to util.printString(), prints error message e to screen.  Parameter lineNumber specifies which line the error occurred on.\r\n\r\n`util.escapeHTML(code)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When printing HTML code to screen, the code must be wrapped in this function in order to escape special characters.  This prevents the browser from trying to execute or interpret code.\r\n\r\n---\r\n\r\n## Extensibility / Open Issues\r\n\r\n#### Things to do\r\n\r\n#### Test Cases\r\n\r\nCurrently, all test cases are located in the file csr-test-cases.js.  In the future, it may be the case that multiple developers are working on test cases concurrently.  To avoid csr-test-cases.js being edited by all test case developers, ideally test cases will be split out into multiple files.\r\n\r\nInitial attempts to divide test cases into multiple files created issues, so all test cases were moved into csr-test-cases.js for the time being.\r\n\r\n---\r\n\r\n## Class Reference\r\n\r\nClass descriptions and primary member functions listed below.\r\n\r\n#### CSREngine Class\r\n\r\nUsed to create an instance of the engine where code execution begins.\r\n\r\n`CSREngine.initialize()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kicks off the engine analysis.\r\n\r\n`CSREngine.runNormal()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run analysis with option to print results above Web page.\r\n\r\n`CSREngine.runConsole()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run analysis with option priont results to JavaScript console.\r\n\r\n`CSREngine.populateDocuments()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Search HTML source for `<link>` and `<script>` tags to populate array CSREngine.documents with all linked client-side files.\r\n\r\n`CSREngine.populateTestCases()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calls function `csrTestCases.populateTestCases()` located in csr-test-cases.js to populate an array of all current test cases.\r\n\r\n`CSREngine.analyzeDocuments()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an instance of DocAnalysis class for each linked client-side document and kicks off analysis on that document.\r\n\r\n#### DocAnalysis Class\r\n\r\nUsed to run analysis on a particular document.\r\n\r\n`DocAnalysis.runAnalysis()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Entry point for running analysis on a document.  Calls one of the below functions depending on the type of the document contained in the instance of the class.\r\n\r\n`DocAnalysis.runHtmlAnalysis()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runs all HTML test cases on the document.\r\n\r\n`DocAnalysis.runCssAnalysis()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runs all CSS test cases on the document.\r\n\r\n`DocAnalysis.runJsAnalysis()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runs all JavaScript test cases on the document.\r\n\r\n##### TestCase Class\r\n\r\nContains information about a test case including its type and where the implementation is located.\r\n\r\n#### Document Class\r\n\r\nContains information about a document (file) including its location, type, and source code.\r\n\r\n`Document.getLines()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array that consists of the document split into lines.  This allows traversal of the document line by line using a __for__ loop or similar.\r\n\r\n`Document.addError()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Should be called when an error is found in document.  This is used to track the number of errors found in each document.\r\n\r\n`Document.readContent()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs and AJAX request to locate the document.  If the document is found, the source code is assigned to class member content'.\r\n\r\n`Document.getContent()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the source code of the document contained in class member 'content'.\r\n\r\n`Document.printContent()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prints the source code of the document to the JavaScript console.  This is mostly used for debugging.\r\n\r\n#### Filters Class\r\n\r\nUsed to create document filters to specify which documents should and should not be analyzed.\r\n\r\n`Filters.initialize()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines the default filters and pushes them onto an array held in class member 'filters'.\r\n\r\n`Filters.getFilters()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of all filters held in class member 'filters'.\r\n\r\n`Filters.ignore(source)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Takes in a file name/location and returns true if the file should be ignored during the analysis, false otherwise.\r\n\r\n#### CodeBlock Class\r\n\r\nUsed to create a block or line of code to be printed to screen.\r\n\r\n`CodeBlock(code, lineNumber)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize a new CodeBlock instance with code found at lineNumber.  Parameters code and lineNumber are optional, and CodeBlock will be initialized to be empty if not specified.\r\n\r\n`CodeBlock.add(code, lineNumber)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds code found at lineNumber to current CodeBlock instance.  This can be used to create a single-line code block when the current instance is empty, or used to create multiline code blocks by calling this function on sequential lines of code.\r\n\r\n`CodeBlock.clear()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Empties the current CodeBlock instance.  New code can be added to the existing code block through CodeBlock.add().\r\n\r\n`CodeBlock.print()`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prints the current CodeBlock instance to screen.\r\n\r\n#### util (Utility Namespace)\r\n\r\nContains a number of utility and helper functions for use in implementing core functionality and test cases.\r\n\r\n`util.printString(s, classes)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print string s to screen.  This function should always be used when printing to the tool output.  Parameter classes is optional and will add any specified CSS classes to the text output, e.g. to make text bold-italic specify \"csr-bold csr-italic\".\r\n\r\n`util.printError(lineNumber, e)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Similar to util.printString(), prints error message e to screen.  Parameter lineNumber specifies which line the error occurred on.\r\n\r\n`util.escapeHTML(code)`\r\n<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When printing HTML code to screen, the code must be wrapped in this function in order to escape special characters.  This prevents the browser from trying to execute or interpret code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}